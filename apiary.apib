FORMAT: 1A
HOST: http://heartcup.apiblueprint.org/

# HeartCup API

## General Configuration [GET /config]

Retrieve basic settings and content

+ Response 200 (application/json)

## Submit Contact Request [POST /contact/send]

Submit contact form - Using optional project ID requires JWT 

+ Request (application/x-www-form-urlencoded)
    + Attributes
        - name (required,string) - Name of person submitting form
        - email (required,string) - Email of person submitting form
        - message (required,string) - Contact message to be submitted. Max Length: 2048
        - projectId (optional,string) - ID of project to contact -  Requires JWT Token be present on request
    
+ Response 200 (application/json)
    - Attributes
        - message: Contact email sent (string) - Confirmation of message being sent
        
+ Response 403 (application/json)
    - Attributes
        - message: Unauthorized request (string) - The error message
        
+ Response 500 (application/json)
    - Attributes
        - message: Error sending contact email (string) - The error message

## Newsletter [POST /newsletter]

Subscribe to the newsletter

+ Request (application/x-www-form-urlencoded)
    + Attributes
        - email (required,string) - Email of person submitting form
    
+ Response 200 (application/json)
    - Attributes
        - message: Subscription successful. (string) - Subscription success message
        
+ Response 500 (application/json)
    - Attributes
        - message: Failed to subscribe (string) - The error message

## Content [/static-content]

### Get Static Page Content [GET /static-content/{content_type}/{url_key}]

Fetch the contents of a static page

+ Parameters
    + content_type (required,string) - The type of content being fetched
    + url_key (required,string) - The page identifier
    
+ Response 200 (application/json)
    - Attributes
        - message - The HTML Contents of the page.

+ Response 400
    - Attributes
        - message: Unknown content type (string) - The error message
        
+ Response 404
    - Attributes
        - message: Page could not be found (string) - The error message

## Users [/users]

### Get User [GET /user/{user}]

Fetch the user details

+ Parameters
    + user (required) - The user ID or email address

+ Response 200 (application/json)
    - Attributes (StoredUser)
    
+ Response 404 (application/json)
    - Attributes
        - message: User does not exist (string) - The error message

### Following [GET /user/{user}/following/{type}]

Fetch all users, projects, or organizations that the given user follows. Returns
an array of stored objects of the specified type.

+ Parameters
    + user (required) - The user ID or email address
    + type (required, number) - The type of object the user is following (1 - User, 2 - Project, 3 - Organization)

+ Response 200 (application/json)
    - Attributes (array[object])

+ Response 404 (application/json)
    - Attributes
        - message: User not found (string) - The error message
        
+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to create project (string) - The error message


### Follow [POST /user/{user}/following/{type}/{id_to_follow}]

Add entity of the specified type to the given user's following list 

+ Parameters
    + user (required) - The user ID or email address
    + type (required, number) - The type of object being followed (1 - User, 2 - Project, 3 - Organization)
    + id_to_follow (required) - The ID of the object being followed

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 404 (application/json)
    - Attributes
        - message: Entity not found (string) - The error message

+ Response 422 (application/json)
    - Attributes
        - message: Error following entity (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to create project (string) - The error message

### Unfollow [DELETE /user/{user}/following/{type}/{id_to_unfollow}]

Remove entity of the specified type from the given user's following list

+ Parameters
    + user (required) - The user ID or email address
    + type (required, number) - The type of object to remove (1 - User, 2 - Project, 3 - Organization)
    + id_to_unfollow(required) - The ID of the object being removed

+ Response 204 (application/json)

+ Response 404 (application/json)
    - Attributes
        - message: Entity not found (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Login [POST /user/token]

Create a JWT token for the given user

+ Attributes
    + emailAddress (required) - The user's email address
    + password (required) - The user's password

+ Response 200 (application/json)
    - Attributes
        - token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ` (string) - The JWT Token

+ Response 403 (application/json)
    - Attributes
        - message: Invalid email address or password (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Authentication Failed (string) - The error message

### Logout [POST /user/logout]

Invalidate the given user's JWT token

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Unauthorized request (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Authentication Failed (string) - The error message

### Register [POST /user]

Register a new user

+ Attributes (User)
    + password (required) - The user's password

+ Request (application/x-www-form-urlencoded)

+ Response 201 (application/json)
    - Attributes (User)

+ Response 422 (application/json)
    - Attributes
        - message: User already exists (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to create user (string) - The error message

### Update [PUT /user/{user}]

Update the given user

+ Parameters
    + user (required) - The user ID or email address

+ Attributes (User)

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to update user (string) - The error message
        
### User Reports [GET /user/{user}/reports]

Retrieve donation and transaction history for the user

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + user (required) - The user ID or email address
        + offset (optional) - Number of days to provide reporting for Default:30, Max:90
        + export (optional,boolean) - Return data as streamed CSV file vs JSON object

+ Response 200 (application/json)
    - Attributes
        - donations_placed (array[Donation]) - An array of donation objects placed by the user
        - transactions (array[Transaction]) - An array of transaction objects related to account balance
        - account_fees (array[Transaction]) - An array of transaction objects related to account fees

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to retrieve reports (string) - The error message
        
### Update Address [PUT /user/{user}/updateAddress]

Update a billing/shipping/etc address associated with the user.

+ Parameters
    + user (required) - The user ID or email address

+ Attributes (Address)

+ Response 200 (application/json)
    - Attributes (Address)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to update address (string) - The error message

### Update Media [PUT /user/{user}/updateMedia]

Add/update a(n existing) photo/banner/video (youtube,vimeo) for the user.

+ Parameters
    + user (required) - The user ID or email address

+ Attributes (Media)

+ Response 200 (application/json)
    - Attributes (Media)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to update media (string) - The error message

### Request Account Upgrade [POST /user/{user}/upgradeAccount]

Request the account be upgraded to the Professional tier.

+ Parameters
    + user (required) - The user ID or email address
    
+ Response 200 (application/json)
    - Attributes
        - messsage: The request is now pending moderation
        
+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to upgrade account (string) - The error message

### Request Account Downgrade [POST /user/{user}/downgradeAccount]

Request the account be downgraded to the free tier.

+ Parameters
    + user (required) - The user ID or email address
    
+ Response 200 (application/json)
    - Attributes
        - messsage: The account has been downgraded
        
+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to upgrade account (string) - The error message

### Update Setting [PUT /user/{user}/updateSetting]

Update a setting for the given user by key.

+ Parameters
    + user (required) - The user ID or email address
    
+ Attributes
    + setting_name (required) - The settings name [eg: privacy_profile] and its new value [eg: public / private]

+ Response 200 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message
        
+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Update Profile Image [PUT /user/{user}/profileImage]

Update the given user's profile image

+ Parameters
    + user (required) - The user ID or email address
    
+ Attributes(Media)
    + media_data - Base64 Encoded + URL Encoded media data
    + type - 0 = Profile Image, 1 = Banner Image,  2 = Project Thumbnail, 3 = Video
    + alt_text - Alt Text for the media
    + position - Sort order for the media in its collection
    + height - Media Height
    + width - Media Width
    
+ Response 200 (application/json)
    - Attributes
        - id
        - width
        - height
        - url
        - altText
        - position
        - createdAt
        - updatedAt
        
+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Projects [/project]

### Donations Report [GET /project/{id}/donationsReport]

Retrieves a report of donation history for the project.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + id - The ID of the project
        + export (optional,boolean) - Whether to return a JSON object or a streamed CSV file
        + offset (optional, number) - The date offset for loading the collection (eg last X days)
        + limit (optional, number) - Number of donations per page to return
        + order (optional, string) - ASC/DESC
        + orderBy (optional, string) - The field to sort by
        + page (optional, number) - The page number of the collection to load

+ Response 200 (application/json)
    - Attributes (object)
        - total (number)
        - perPage (number) 
        - currentPage (number)
        - lastPage (number)
        - nextPageUrl (string)
        - prevPageUrl (string)
        - from (number) 
        - to (number) 
        - data (array[Donation])

### Get Project Of The Day [GET /projectOfTheDay ]

Retrieves the Project Of The Day

+ Response 200 (application/json)
    - Attributes (Project)
 
+ Response 404 (application/json)
    - Attributes
        - message: Project Not Found (string) - The error Message

### Search [GET /project{?query,orderBy,order,limit,page}]

Search for projects. Returns a list of project summaries.

+ Parameters
    + query (optional) - Search query
    + orderBy (optional) - Project attribute to order by
    + order (optional) - DESC or ASC (default: DESC)
    + limit (optional) - The maximum number of projects to return
    + page (optional) - The page to return, if limit is also given

+ Response 200 (application/json)
    - Attributes (object)
        - total (number)
        - per_page (number) 
        - current_page (number)
        - last_page (number)
        - next_page_url (string)
        - prev_page_url (string)
        - from (number) 
        - to (number) 
        - data (array)
            - (Project)
                - id: 1 (number)
                - title: After School Programs
            - (Project)
                - id: 2 (number)
                - title: Music in the Park
            - (Project)
                - id: 3 (number)
                - title: Local Animal Shelter

### Project Detail [GET /project/{projectId}]

Fetch the details of a project. Takes the project ID or key as a parameter

+ Parameters
    + projectId (required, string) - The Project ID or Key

+ Response 200 (application/json)
    - Attributes (ProjectDetail)

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Supporters [GET /project/{projectId}/supporters]

Fetch an array of supporters for a project. Takes the project ID or key as a parameter.

+ Parameters
    + projectId (required, string) - The Project ID or Key

+ Response 200 (application/json)
    - Attributes (array[StoredUser])

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Project [POST /project]

Create a new project.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + title: New Project Title (required, string) - The title of the new project
        + tagline (optional, string)
        + summary (optional, string)
        + goalAmount (optional, number)
        + goalDate (string) - The target date for this project to be completely funded (ISO8601 format)
        + ownerType (optional,number) - The type of entity that owns the project (user/organzation).  If not specified API uses authenticated user.
        + ownerEntityId (optional,number) - The entity id of the object that owns the project. If not specified API uses authenticated user.

+ Response 201 (application/json)
    - Attributes (Project)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to create project (string) - The error message

### Update a Project [PUT /project/{projectId}]

Update a project.

+ Parameters
    + projectId: 1 (required, number) - The ID of the project to update.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + title: New Project Title (required, string) - The title of the new project
        + tagline (optional, string)
        + summary (optional, string)
        + goalAmount (optional, number)
        + goalDate (string) - The target date for this project to be completely funded (ISO8601 format)

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Delete a Project [DELETE /project/{projectId}]

Delete a project

+ Parameters
    + projectId (required, number) - The ID of the project to delete

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message


### Update Address [PUT /project/{project}/updateAddress]

Update a billing/shipping/etc address associated with the project.

+ Parameters
    + project (required) - The project ID or url key

+ Attributes (Address)

+ Response 200 (application/json)
    - Attributes (Address)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to update address (string) - The error message

### Update Media [PUT /project/{project}/updateMedia]

Add/update a(n existing) thumbnail/banner/video (youtube,vimeo) for the project.

+ Parameters
    + project (required) - The project ID or url key

+ Attributes (Media)

+ Response 200 (application/json)
    - Attributes (Media)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Failed to update media (string) - The error message
        
## Search [/search]

### Search [GET /search/{?query,type,orderBy,order,limit,page}]

Produce a search for Users or Projects

+ Parameters
    + query (optional) - Search query
    + type (optional) - The type of object to search for (Project or User)
    + orderBy (optional) - Attribute to order by
    + order (optional) - DESC or ASC (default: DESC)
    + limit (optional) - The maximum number to return
    + page (optional) - The page to return, if limit is also given

+ Response 200 (application/json)
    - Attributes (array)
        - (Project)
            - id: 1 (number)
            - title: After School Programs
        - (User)
        - (Project)
            - id: 3 (number)
            - title: Local Animal Shelter

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Categories [/category]

### Get all Categories [GET /category]

Fetch all categories

+ Response 200 (application/json)
    + Attributes 
        - total (number)
        - perPage (number) 
        - currentPage (number)
        - lastPage (number)
        - nextPageUrl (string)
        - prevPageUrl (string)
        - from (number) 
        - to (number) 
        - data (array[StoredCategory])

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Browse Categories [GET /category/{?orderBy,order,limit,page}]

List all available categories

+ Parameters
    + orderBy (optional) - Attribute to order by
    + order (optional) - DESC or ASC (default: DESC)
    + limit (optional) - The maximum number to return
    + page (optional) - The page to return, if limit is also given

+ Response 200 (application/json)
    + Attributes 
        - total (number)
        - perPage (number) 
        - currentPage (number)
        - lastPage (number)
        - nextPageUrl (string)
        - prevPageUrl (string)
        - from (number) 
        - to (number) 
        - data (array[StoredCategory])

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Get A Single Category [GET /category/{category}]

Fetch an individual category
+ Parameters
    + category (required) - The ID or key for the category
    
+ Response 200 (application/json)
    - Attributes [StoredCategory]

+ Response 404 (application/json)
    - Attributes
        - message: Category not found (string) - The error message

### Browse Category Projects [GET /category/{category}/projects{?orderBy,order,limit,page}]

View all projects associated to a specified category.

+ Parameters
    + category (required) - The ID or key for the category to update

+ Response 200 (application/json)
    - Attributes (array[Project])

+ Response 404 (application/json)
    - Attributes
        - message: Category not found (string) - The error message

### Update Category [PUT /category/{category}]

Update a given category

+ Parameters
    + category (required) - The ID or key for the category to update

+ Response 200 (application/json)
    + Attributes (Category)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Category [POST /category]

Create a new category

+ Request (application/x-www-form-urlencoded)
    + Attributes
        - name (required,string) - The name of the new category
        - position (optional, number) - The position of the category in the list

+ Response 201 (application/json)
    + Attributes(Category)

+ Response 422 (application/json)
    + Attributes
        - message: Category already exists (string) - The error message

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Delete Category [DELETE /category/{category}]

Delete the given category

+ Parameters 
    + category (required) - The ID or key for the category to remove

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Transactions [/transaction]

### View All Transactions [GET /transaction ]

Fetch paginated collection of transactions

+ Response 200 (application/json)
    + Attributes (array[Transaction])

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### View Transaction [GET /transaction/{transaction_id}]

Fetch details for a transaction

+ Parameters
    + transaction_id (required) - The ID of the transaction

+ Response 200 (application/json)
    + Attributes (Transaction)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Update Transaction [PUT /transaction/{transaction}]

Update the given transaction 

+ Parameters
    + transaction (required) - The ID of the transaction to update

+ Response 200 (application/json)
    + Attributes (Transaction)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Add Card To Account [POST /transaction/addCard]

Add or update the credit card on file for the current user.

+ Request (application/x-www-form-urlencoded)
    - Attributes
        + cardNumber - The credit card number to add or update
        + expMonth  - The credit card expiration month
        + expYear   - The credit card expiration year
        + cvc   - The credit card validation number

+ Response 200 (application/json)
    - Attributes
        - message: Credit card account created successfully (string) - The response message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Transaction [POST /transaction]

Add money to the current user's account balance

+ Request (application/x-www-form-urlencoded)
    - Attributes
        - amount (number) - The dollar value in dollars / USD to be charged to the user's account

+ Response 200 (application/json)
    - Attributes
        - message: Transaction completed successfully (string) - The response

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Refund [POST /transaction/refund]

Refund a user based off of an existing transaction

+ Request (application/x-www-form-urlencoded)
    - Attributes
        - transactonId - The ID of the transaction to be reversed
        - userId - The user ID that owns the transaction.

+ Response 200 (application/json)
    - Attributes
        - message: "Refund completed successfully" (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Donations [/donation]

### Donate [POST /donation/{donation}]

Donate to a project

+ Request (application/x-www-form-urlencoded)
    - Attributes
        - projectId (required,number) - Project ID to submit donation to
        - amount (required,number) - Amount to donate
        - details (string) - Transaction details
        - updateId (optional, number) - The project post to associate the donation with

+ Response 200 (application/json)
    - Attributes
        - message: Donation completed successfully. (string) - The response

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### View All Donations [GET /donation]

A paginated collection of all donations.

+ Response 200 (application/json)
    + Attributes (array[Donation])

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### View Donation [GET /donation/{donation_id}]

View an individual donation record

+ Parameters
    + donation_id (required,number) - The ID of the donation

+ Response 200 (application/json)
    - Attributes (Donation)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Update Donation [PUT /donation/{donation_id}]

Update the given donation

+ Request (application/x-www-form-urlencoded)
    - Attributes
        - donation (required) - The donation object to update

+ Response 200 (application/json)
    + Attributes (Donation)

+ Response 204 (application/json)

### Reverse A Donation [DELETE /donation/{donation_id}]

Reverse a donation.

+ Parameters
    + donation_id (required) - Project ID to submit donation to

+ Response 200 (application/json)
    - Attributes
        - message:  Donation reversed successfully. (string) - The error message

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Organizations [/organization]

### Get All Organizations [GET /organization]

Fetch all organizations

+ Response 200 (application/json)
    + Attributes (array[Organization])

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Get Organization [GET /organization/{organization}]

Fetch the given organization

+ Parameters 
    + organization (required) - The ID or key of the organization to retrieve

+ Response 200 (application/json)
    + Attributes (Organization)

+ Response 404 (application/json)
    + Attributes
        - message: Organization not found (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Update Organization [PUT /organization/{organization}]

Update the given organization

+ Parameters
    + organization (required) - The ID or key of the organization to update

+ Response 204 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 404 (application/json)
    - Attributes
        - message: Organization not found (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Organization [POST /organization]

Create a new organization

+ Request (application/x-www-form-urlencoded)
    + Attributes(Organization)

+ Response 201 (application/json)
    + Attributes (Organization)

+ Response 401 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 422 (application/json)
    + Attributes
        + message: Organization already exists (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Delete Organization [DELETE /organization/{organization}]

Soft delete specified organization

+ Response 200 (application/json)
    -  Attributes
        - message: Organization was successfully deleted (string) - The response message

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message
        
+ Response 404 (application/json)
    - Attributes
        - message: Organization not found (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

## Update [/update]

### Get Post [GET /update/{id}]

Get a post for a given entity (User, Project, Organization)

+ Parameters 
    + id - The ID or key for the given entity 

+ Response 200 (application/json)
    + Attributes (Update)
        + projectData (object) - Information about the optionally associated project
            + id - Project ID
            + title - Project Title
            + status - Project's status
            + you_donated - Amount donated via update in context of currently authenticated user

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Get Posts By Entity [GET /update/{type}/{entity_id}]

Get posts for the given entity

+ Parameters
    + type - The update type (1 - User, 2 - Project, 3 - Organization)
    + entity_id - The ID of the entity

+ Response 200 (application/json)
    + Attributes (array[Update]) 

+ Response 400 (application/json)
    - Attributes
        - message: Invalid request (string) - The error message

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Post [POST /update]

Create a new post
+ Request (application/x-www-form-urlencoded)
    + Attributes 
        - [Update]
        - taggedProject (optional, number) - Not available on project posts.  The ID of the project to tag in on the post

+ Response 201 (application/json)
    + Attributes (Update)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500
    - Attributes
        - message: An error has occurred (string) - The error message

### Update Post [PUT /update/{update}]

Update the given activity

+ Parameters
    + update - The given activity ID

+ Response 200 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500
    - Attributes
        - message: An error has occurred (string) - The error message

### Delete Post [DELETE /update/{update}]

Delete the given activity

+ Parameters
    + update - The given update ID 

+ Response 200

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500
    - Attributes
        - message: An error has occurred (string) - The error message

## MessageQueue [/messages]

### Get Messages [GET /messages/{user}]

Get the messages for the given user

+ Parameters 
    + user - The ID or key of the given user

+ Response 200 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Create Message [POST /messages/{type}]

Add a given type of message to the queue

+ Parameters
    + type - The type of activity (ProfileUpdate or ProjectUpdate)

+ Response 201 (application/json)
    - Attributes
        - message: Message has been created. (string) - The response message

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

### Delete Message [DELETE /messages/{id}]

Delete a message from the queue when received

+ Parameters
    + id - ID of the message to delete

+ Response 200 (application/json)

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: An error has occurred (string) - The error message

# Data Structures

## User

+ email: `user@example.com` (string) - The user's email address
+ profileImage array[(Media)] - The user's profile image in various sizes
+ bannerImage array[(Media)] - The user's profile banner image collection
+ video (Media) - The user's profile video
+ name: Sample User (string) - The user's display name
+ accountType (enum[string]) - The user's account type
    + Default: regular
    + Members
        + regular (default) - Regular user
        + pro - Pro user (paid account)
+ privacy (object) - The user's privacy settings
    + profile (enum[string]) - The user's profile visibility
        + Default : public
        + Members
            + hidden - The user's profile is hidden
            + public (default) - The user's profile is visible to anyone, links to the user's profile may appear on HeartCup
            + link - The user's profile is only visible with a direct link
    + donations (enum[string]) - The user's donation visibility
        + Default: projects
        + Members
            + hidden - Do not show projects supported or donation amounts
            + projects (default) - Only show projects the user supports
            + public - Show projects and donation amounts
+ followingUsers (array[StoredUser]) - The users that the given user follows
+ followingProjects (array[StoredProject]) - The projects that the given user follows
+ followingOrganizations (array[Organization]) - The organizations that the given user follows
+ paymentServices (object) - A list of established payment methods for the current user
+ ownedProjects (array[StoredProject]) - Array representing projects created and owned by the user
+ school (School) - The user's associated school
+ coreValues: `Core Value 1, Core Value 2, Core Value 3` (string) - The user's core value preferences
+ organizations (array[Organization]) - The organizations that the given user is a member of
+ about (string) - A blurb about the User.
+ newsletterOptIn (enum[number]) - User's opt-in option for the newsletter
    + Default: 1
    + Members
        + 0 - Opt-Out / Disabled
        + 1 (default) - Opt-In / Enabled

### StoredUser (User)

+ id: 1 (number) - The user ID
+ posts (array[ProfileUpdate]) - Array of user's profile activity
+ accountBalance: 100.00 (number) - The user's account balance (in hearts?)
+ backers (array[StoredUser]) - Array of user IDs of people who support the given user's owned projects
+ totalDonated: 100.00 (number) - Aggregated amount representing how much the user has donated to various projects
+ totalReceived: 100.00 (number) - Aggregated amount representing how much the user has received in support for owned projects
+ isActive (enum[number]) - Value representing whether or not the user account is still active
    + Default: 1
    + Members
        + 0 - Inactive / Disabled
        + 1 (default) - Active/ Enabled

## Project

+ title: The Outreach Project (string) - The project title
+ tagline: Sponsored by the Giving Keys (string) - The project tagline
+ thumbnailImage (Media) - The project thumbnail
+ bannerImage array[(Media)] - The project profile banner image collection
+ video (Media) - The project video
+ shippingAddress (Address) - The project address
+ billingAddress (Address) - The project address
+ email (string) - Contact email for the project.
+ phone (string) - Contact phone number for the project.
+ website (string) - External website associated with the project.
+ organizationId: 1 (number) - The id of the organization that owns this project
+ missionStatement: Sample Project Mission Statement (string) - The project mission statement
+ goalAmount: 10000 (number) - The project goal amount in hearts
+ goalDate: `2016-05-05T12:30:00` (string) - The target date for this project to be completely funded (ISO8601 format)
+ owner (object) - The user or organization that owns the project

### StoredProject (Project)

+ id: 55 (number) - The project ID
+ key: 1 (number) - The ID of the URL key corresponding to the project
+ fundedAmount: 500 (number) - The total funds collected for the project in hearts (integer)
+ supportersTotal: 65 (number) - The total number of supporters for this project
+ createdAt: `2016-05-05T12:30:00` (string) - The image creation date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) - The image creation date (ISO8601 format)

#### ProjectDetail (StoredProject)

+ description: Basic Project Description (string) - Description of the project
+ supporters (array[StoredUser]) - Array representing users who support this project
+ currency (enum[string]) - The type of currency expected for the project (USD default)
    + Default: USD
    + Members
        + USD (default)
+ taxExemptStatus (enum[number]) - The projects tax exemption status
    + Default: 0
    + Members
        + 0 (default) - Non Charitable Project - For Profit
        + 1 - Chartiable Project - Non Profit
+ approved (enum[string]) - Value representing the approval status of the project
    + Default: 0
    + Members
        + 0 (default) - Pending Approval
        + 1 - Project Approved
        + 2 - Project Disapproved
+ status (enum[string]) - Value representing the state of the project, whether it is active or not
    + Default: active
    + Members
        + active
        + closed
+ categories (array[StoredCategory]) - The categories associated with this project
+ posts (array[ProjectUpdate]) - The status updates associated with the given project
+ beneficiaryName (string) - The name of the beneficiary for the project
+ beneficiaryEmail (string) - The email address of the beneficiary for the project
+ beneficiaryPhone (string) - The phone number of the beneficiary for the project
+ beneficiaryUrl (string) - The website of the beneficiary for the project
+ beneficiaryAddress ([address]) - The address of the beneficiary for the project
+ fundingComplete: 0 (enum[number]) - Whether or not the project has met or passed it's goal
+ percentFunded (float) - The decimal representation of the percentage of the goal reached for the project
+ followersCount (number) - The number of users following this project
+ amIFollowing (bool) - Whether or not the current user is following the current project

## Address

+ id: 1 (number) - The address ID
+ line1: 123 Someplace Nice (string) - Address line 1
+ line2 (string) - Address line 2
+ locality: Sunny (string) - The address locality or city
+ region: CA (string) - The address region, state or province
+ postcode: 90210 (string) - The address postcode
+ countryCode: USA (string) - The address country code

## Media
+ id: 1 (number) - The image ID
+ width: 150 (number) - The image width
+ height: 150 (number) - The image height
+ url: `http://lorempixel.com/800/600/cats/` (string) - The image URL
+ altText (string) - The alternate text for the image.
+ position (number) - The sort order for multiple images.
+ createdAt: `2016-05-05T12:30:00` (string) - The image creation date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) - The image creation date (ISO8601 format)

## UrlKey

+ id: 1 (number) - The UrlKey ID
+ key: `the-url-key` (string) - Hashed string representing the url
+ type (enum[number]) - The INT value corresponding to the type of entity to which this key belong
    + Default: 0
    + Members
        + 0 (default) - Project
        + 1 - Organization
+ entityId: 1 (number) - The ID of the object to which this key belong (StoredProject.id, etc)

## Update

+ id: 1 (number) - The update ID
+ entityId: 1 (optional, number) - Optional ID of related entity
+ type (enum[number]) - The type of status update - project update, profile post
    + Default: 1
    + Members
        + 1 (default) - ProfileUpdate - Profile Post
        + 2 - ProjectUpdate - Project Update
        + 3 - OrganizationUpdate - Organization Update
+ description: Dummy Post Content (string) - The update description
+ createdAt: `2016-05-05T12:30:00` (string) - The creation date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) - The update date (ISO8601 format)
+ status: 1 (enum[number]) - Pending Moderation / Approved / Denied / Inactive (Disabled)
+ isAutopost: 0 (enum[number]) - Shows whether this is a system generated post

### ProjectUpdate (Update)

+ projectId: 1 (number) - The project ID associated with the status update
+ userId: 1 (number) - The ID of the user who created the status update
+ projectData (object) - Several attributes from the associated project
    + Members
        + id
        + status
        + title
        + youDonated

### ProfileUpdate (Update) 

+ userId: 1 (number) - The user ID associated with the status update
+ organizationId: 1 (number) - The organization ID associated with the status update
+ taggedProjectData (object) - Several attributes from the tagged project
    + Members
        + id
        + title
        + status
        + percentFunded
        + thumbnailImage
        + billingAddress
        + youDonated

## PaymentObject

+ id: 1 (number) - The ID associated with the transaction
+ userId: 1 (number) - The ID of the user who created the transaction
+ createdAt: `2016-05-05T12:30:00` (string)  - The transaction date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string)  - The transaction date (ISO8601 format)
+ details (object) - Transaction receipt
+ transactionId - The ID of the transaction from the payment gateway
+ amount (number) - The value of the transaction
+ status (enum[string]) - The current transaction status
    + Members
        + processed
        + refunded

### Transaction (PaymentObject)

+ type (enum[number]) - Donation / Payment
    + Default: 1
    + Members
        + 0 (default) - Payment
        + 1 - Donation
+ currency: USD (string) - The currency for the transaction
+ amountBeforeFees (float) - The original amount requested to be added to the customer account before transaction fees

### Donation (PaymentObject)

+ projectId: 1 (number) - The project ID associated with the donation
+ updateID: 1 (optional, number) - The update object this donation is associated with

## Permission

+ roleId: 1 (number) - The ID of the type of role 
+ resourceAction (enum[string]) - The action which needs permission
    + Members
        + update
        + delete
+ permission (enum[string]) - The grant or deny permission for the action
    + Members
        + 1
        + 0
+ createdAt: `2016-05-05T12:30:00` (string) - The transaction date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) The transaction date (ISO8601 format)

## Role

+ id: 1 (number) - The ID for the role
+ title (enum[string]) - The title of the role
    + Default: member
    + Members
        + owner - Project/Organization Owner
        + moderator - Can post/approve content for project/organization.
        + editor - Can post content for project/organization to moderation queue.
        + member (default) - Can view project/organization.

## Category

+ name: Sample Category (string) - The name of the category

### StoredCategory(Category)

+ id: 1 (number) - The ID of the stored category
+ key: 1 (number) - The ID of the URL key corresponding to the category
+ position: 0 (number) - The Position of the category in the list

## Organization

+ id: 1 (number) - The organization ID
+ title: Sample Organization (string) - The title of the organization
+ key: 1 (number) - The ID of the URL key corresponding to the organization
+ type: 1 (number) - Charity / Business / Group / Etc
+ members (array[OrganizationMember]) - An array of organization members
+ owner (object) - The organization owner
+ posts (array[ProfileUpdate]) - The status updates associated with the given project
+ video (Media)  - The organization's video
+ bannerImage array[(Media)] - The organization's profile banner image collection
+ createdAt: `2016-05-05T12:30:00` (string) - The timestamp the organization was created (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) - The timestamp the organization was updated (ISO8601 format)
+ deletedAt: `2016-05-05T12:30:00` (string) - The timestamp the organization was deleted (ISO8601 format)


### School (Organization)

### Charity (Organization)

+ taxEIN: `00-0000000` (string) - The tax employer identification number for charitable organization

## OrganizationMember

+ id: 1 (number) - The ID of the organization member
+ organizationId: 1 (number) - The ID of the organization that the member is a part of
+ userId: 1 (number) - The ID of the stored user
+ createdAt: `2016-05-05T12:30:00` (string) - The timestamp the member joined the organization date (ISO8601 format)
+ updatedAt: `2016-05-05T12:30:00` (string) - The timestamp the member was updated (ISO8601 format)