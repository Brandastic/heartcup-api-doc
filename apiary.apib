FORMAT: 1A
HOST: http://heartcup.apiblueprint.org/

# HeartCup API

## Users [/users]

### Get User [GET /user/{user}]

Fetch the user details

+ Parameters
    + user (required) - The user ID or email address
    
+ Response 200 (application/json)
    - Attributes (StoredUser)
    
+ Response 404 (application/json)
    - Attributes
        - message: User does not exist (string) - The error message

### Login [POST /user/token]

Create a JWT token for the given user

+ Attributes
    + emailAddress (required) - The user's email address
    + password (required) - The user's password
    
+ Response 200 (application/json)
    - Attributes
        - token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ` (string) - The JWT Token
        
+ Response 401 (application/json)
    - Attributes
        - message: Invalid email address or password (string) - The error message

+ Response 500 (application/json)
    - Attributes
        - message: Authentication Failed (string) - The error message

### Register [POST /user]

Register a new user

+ Attributes (User)
    
+ Request (application/x-www-form-urlencoded)
    
+ Response 201 (application/json)
    - Attributes (User)

+ Response 422 (application/json)
    - Attributes
        - message: User already exists (string) - The error message
        
+ Response 500 (application/json)
    - Attributes
        - message: Failed to create user (string) - The error message

### Update [PUT /user/{user}]

Update the given user

+ Parameters
    + user (required) - The user ID or email address
    
+ Attributes (User)
    
+ Response 204

+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

### Update Profile Image [PUT /user/{user}/profileImage]

Update the given user's profile image

+ Parameters
    + user (required) - The user ID or email address
    
+ Response 204
    
+ Response 403 (application/json)
    - Attributes
        - message: Permission denied (string) - The error message

## Projects [/project]

### Search [GET /project{?query,orderBy,order,limit,page}]

Search for projects. Returns a list of project summaries.

+ Parameters
    + query (optional) - Search query
    + orderBy (optional) - Project attribute to order by
    + order (optional) - DESC or ASC (default: DESC)
    + limit (optional) - The maximum number of projects to return
    + page (optional) - The page to return, if limit is also given

+ Response 200 (application/json)
    - Attributes (array)
        - (Project)
            - id: 1
            - title: After School Programs
        - (Project)
            - id: 2
            - title: Music in the Park
        - (Project)
            - id: 3
            - title: Local Animal Shelter

### Project Detail [GET /project/{projectId}]

Fetch the details of a project. Takes the project ID or key as a parameter

+ Parameters
    + projectId (required, string) - The Project ID or Key
    
+ Response 200 (application/json)
    - Attributes (ProjectDetail)

    
### Create Project [POST /project]

Create a new project.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + title: New Project Title (required, string) - The title of the new project
        + tagline (optional, string)
        + summary (optional, string)
        + goalAmount (optional, number)
        + goalDate (string) - The target date for this project to be completely funded (ISO8601 format)

+ Response 201
    - Attributes (Project)
    
+ Response 500 (application/json)
    - Attributes
        - message: Failed to create project (string) - The error message

### Update a Project [PUT /project/{projectId}]

Update a project.

+ Parameters
    + projectId: 1 (required, number) - The ID of the project to update.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + title: New Project Title (required, string) - The title of the new project
        + tagline (optional, string)
        + summary (optional, string)
        + goalAmount (optional, number)
        + goalDate (string) - The target date for this project to be completely funded (ISO8601 format)
        
+ Response 204
    
# Data Structures

## User

+ email: `user@example.com` (string) - The user's email address
+ profileImage (Image) - The user's profile image
+ name: Sample User (string) - The user's display name
+ accountType (enum[string]) - The user's account type
    + Members
        + regular (default) - Regular user
        + pro - Pro user (paid account)
+ privacy (object) - The user's privacy settings
    + profile (enum[string]) - The user's profile visiblity
        + Default : public
        + Members
            + hidden - The user's profile is hidden
            + public - The user's profile is visible to anyone, links to the user's profile may appear on HeartCup
            + link - The user's profile is only visible with a direct link
    + donations (enum[string]) - The user's donation visiblity
        + Members
            + hidden - Do not show projects supported or donation amounts
            + projects (default) - Only show projects the user supports
            + public - Show projects and donation amounts
+ following (array[number]) - The users and projects that the current user follows
+ paymentMethod (object) - Object representing the user's payment card
+ ownedProjects (array[number]) - Array representing projects created and owned by the user
+ school (enum[string]) - The user's associated school
    + Members
        + Sample School 1 (default)
        + Sample School 2
        + Sample School 3
+ password: `$2a$04$06uhTK8HPz17FXkrW8mf.OORzstmPjHxLDEfyrEtKuXBYj3Vt.igu` (string) - A hash value representing the user's password
+ coreValues: `Core Value 1, Core Value 2, Core Value 3` (string) - The user's core value preferences
+ organizations (array[number]) - The organizations that the current user is a member of
+ newsletterOptIn (enum[number]) - User's opt-in option for the newsletter
    + Members
        + 0 - Opt-Out / Disabled
        + 1 (default) - Opt-In / Enabled

### StoredUser (User)

+ id: 1 (number) - The user ID
+ posts (array[ProfileActivity]) - Array of user's profile activity
+ accountBalance: 100.00 (number) - The user's account balance (in hearts?)
+ backers (array[number]) - Array of user IDs of people who support the current user's owned projects
+ totalDonated: 100.00 (number) - Aggregated amount representing how much the user has donated to various projects
+ totalReceived: 100.00 (number) - Aggregated amount representing how much the user has received in support for owned projects
+ isActive (enum[number]) - Value representing whether or not the user account is still active
    + Members
        + 0 - Inactive / Disabled
        + 1 (default) - Active/ Enabled

## Project

+ title: The Outreach Project (string) - The project title
+ tagline: Sponsored by the Giving Keys (string) - The project tagline
+ thumbnail (Image) - The project thumbnail
+ banner (Image) - The project banner
+ address (Address) - The project address
+ organizationId: 1 (number) - The id of the organization that owns this project
+ summary: Sample Project Summary (string) - The project summary
+ goalAmount: 10000 (number) - The project goal amount in hearts
+ goalDate: `2016-05-05T12:30:00` (string) - The target date for this project to be completely funded (ISO8601 format)
+ ownerId: 1 (number) - The user or organization ID of the project creator and owner

### StoredProject (Project)

+ id: 55 (number) - The project ID
+ key: 1 (number) - The ID of the URL key corresponding to the project
+ fundedAmount: 500 (number) - The total funds collected for the project in hearts (integer)
+ supportersTotal: 65 (number) - The total number of supporters for this project

#### ProjectDetail (StoredProject)

+ description: Basic Project Description (string) - Description of the project
+ details (object) - Details of the project
+ supporters (array[number]) - Array representing users who support this project
+ currency (enum[string]) - The type of currency expected for the project (USD default)
    + Members
        + USD (default)
+ taxExemptStatus (enum[number]) - The projects tax exemption status
    + Members
        + 0 (default) - Non Charitable Project - For Profit
        + 1 - Chartiable Project - Non Profit
+ approved (enum[string]) - Value representing the approval status of the project
    + Members
        + 0 (default) - Pending Approval
        + 1 - Project Approved
        + 2 - Project Disapproved
+ active (enum[string]) - Value representing the state of the project, whether it is active or not
    + Members
        + 0 - Inactive / Disabled
        + 1 (default) - Active
+ categories (array[number]) - The categories associated with this project
+ updates (array[ProjectActivity]) - The status updates associated with the current project

## Address

+ id: 1 (number) - The address ID
+ line1: 123 Someplace Nice (string) - Address line 1
+ line2 (string) - Address line 2
+ locality: Sunny (string) - The address locality or city
+ region: CA (string) - The address region, state or province
+ postcode: 90210 (string) - The address postcode
+ countryCode: USA (string) - The address country code

## Image

+ width: 150 (number) - The image width
+ height: 150 (number) - The image height
+ url: `http://lorempixel.com/800/600/cats/` (string) - The image URL

## UrlKey

+ id: 1 (number) - The UrlKey ID
+ key: `the-url-key` (string) - Hashed string representing the url
+ type (enum[number]) - The INT value corresponding to the type of entity to which this key belong
    + Members
        + 0 (default) - Project
        + 1 - Organization
+ entityId: 1 (number) - The ID of the object to which this key belong (StoredProject.id, etc)

## Activity

+ id: 1 (number) - The activity ID
+ entityId: 2 (optional, number) - Optional ID of related entity
+ type (enum[string]) - The type of activity - project update, profile post
    + Members
        + 0 - ProfileActivity - Profile Post
        + 1 - ProjectActivity - Project Update
+ description: Dummy Post Content (string) - The activity description
+ createdDate: `2016-05-05T12:30:00` (string) - The activity date (ISO8601 format)
+ status: 1 (enum[number]) - Pending Moderation / Approved / Denied / Inactive (Disabled)


### ProjectActivity (Activity)

+ projectId: 1 (number) - The project ID associated with the activity
+ userId: 1 (number) - The ID of the user who created the activity

### ProfileActivity(Activity) 

+ userId: 1 (number) - The user ID associated with the activity
+ organizationId: 1 (number) - The organization ID associated with the activity

## Transaction

+ id: 1 (number) - The project ID associated with the transaction
+ userId: 1 (number) - The ID of the user who created the transaction
+ type (enum[number]) - Donation / Payment
    + Members
        + 0 - Donation
        + 1 (default) - Payment
+ timestamps (string) - The transaction date (ISO8601 format)
+ details (object) - Transaction receipt

### Donation(Transaction)

+ projectId: 1 (number) - The project ID associated with the donation

## Permission

+ userId: 1 (number) - The ID of the user that owns the permissions
+ roleId: 1 (number) - The ID of the type of role 
+ projectId: 1 (number) - The project ID of the project that owns the permissions

## Role

+ id: 1 (number) - The ID for the role
+ title (enum[string]) - The title of the role
    + Members
        + owner - Project/Organization Owner
        + moderator - Can post/approve content for project/organization.
        + editor - Can post content for project/organization to moderation queue.
        + member (default) - Can view project/organization.

## Category

+ name: Sample Category  (string) - The name of the category

### StoredCategory(Category)

+ id: 1 (number) - The ID of the stored category
+ key: 1 (number) - The ID of the URL key  corresponding to the category

## Organization

+ id: 1 (number) - The organization ID
+ name: Sample Organization (string) - The name of the organization
+ key: 1 (number) - The ID of the URL key corresponding to the organization
+ type: 1 (number) - Charity / Business / Group / Etc

### OrganizationDetail (Organization)

+ members (array[number]) - An array of organization members
+ taxEIN: `00-0000000` (string) - The tax employer identification number for charitable organization

## OrganizationMember

+ id: 1 (number) - The ID of the organization member
+ organizationId: 1 (number) - The ID of the organization that the member is a part of
+ userId: 1 (number) - The ID of the stored user 
+ roleId: 1 (number) - The ID indicating the user's role type in the organization